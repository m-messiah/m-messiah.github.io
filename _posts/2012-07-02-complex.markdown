---
layout: post
status: publish
published: true
title: Комплексные числа
author: ––=Messiλh=––
author_login: Messiah
author_email: m.muzafarov@gmail.com
author_url: http://m.muzafarov.vk.com
excerpt: "<h1>Листинг<&#47;h1>\r\n"
wordpress_id: 163
wordpress_url: http://messiah.ks8.ru/wordpress/?p=163
date: 2012-07-02 11:55:17.000000000 +06:00
categories:
- C++
tags: []
comments: []
---
<h1>Листинг<&#47;h1>
<a id="more"></a><a id="more-163"></a>
<h1>complex.h<&#47;h1>
<pre class="brush: cpp; gutter: true"> #ifndef COMPLEX_H
 #define COMPLEX_H
 #include <iostream>
 using namespace std;
 class Complex
 {private:
 double re,im;
 public:
 Complex(){re=0;im=0;}
 Complex(double, double);
 ~Complex(){};
 Complex(const Complex&amp;);
 friend istream&amp; operator>>(istream &amp;fi, Complex &amp;x);
 friend ostream&amp; operator<<(ostream &amp;fo, const Complex &amp;x);
 Complex&amp; operator +(Complex&amp;);
 Complex&amp; operator -(Complex&amp;);
 Complex&amp; operator *(Complex&amp;);
 Complex&amp; operator &#47;(Complex&amp;);
 Complex&amp; operator +(double);
 Complex&amp; operator -(double);
 Complex&amp; operator *(double);
 Complex&amp; operator &#47;(double);
 Complex&amp; operator- (){
 re=-re;
 im=-im;
 return *this;
 }
 Complex&amp; operator! (){
 im=-im;
 return *this;
 }
 };
 #endif<&#47;pre>
<h1>complex.cpp<&#47;h1>
<pre class="brush: cpp; gutter: true"> #include"complex.h"
 Complex::Complex(double r, double i) {re=r; im=i;}
 Complex::Complex(const Complex &amp; x){
 this->re = x.re;
 this->im = x.im;}
 istream &amp;operator>>(istream &amp;fi, Complex &amp;x)
 { char c;
 fi>>x.re>>c; if (c==&#039;-&#039;) {fi>>c>>x.im; x.im=-x.im;}
 else fi>>c>>x.im;
 return fi;
 }
 ostream &amp;operator<<(ostream &amp;fo, const Complex &amp;x)
 { fo<<x.re;
 if (x.im<0) fo<<"-i"<<(-x.im); else fo<<"+i"<<x.im; return fo;}
 Complex&amp; Complex::operator +(Complex &amp;x){this->re=this->re+ x.re; this->im=x.im+this->im; return *this;}
 Complex&amp; Complex::operator -(Complex &amp;x){this->re=this->re- x.re; this->im=this->im -x.im; return *this;}
 Complex&amp; Complex::operator *(Complex &amp;x){this->re=this->re*x.re-this->im*x.im; this->im=this->re*x.im+this->im*x.re; return *this;}
 Complex&amp; Complex::operator &#47;(Complex &amp;x){if ((x.re==0) &amp;&amp; (x.im==0)) {this->im=0; this->re=0; goto lab;}
 this->re=(this->re*x.re+this->im*x.im)&#47;(x.re*x.re + x.im*x.im);
 this->im=(this->im*x.re-this->re*x.im)&#47;(x.re*x.re + x.im*x.im);
 lab: return *this;
 }
 Complex&amp; Complex::operator +(double x){re=re+x ; return *this;}
 Complex&amp; Complex::operator -(double x){re-=x; return *this;}
 Complex&amp; Complex::operator *(double x){re*=x; im*=x; return *this;}
 Complex&amp; Complex::operator &#47;(double x){re&#47;=x; im&#47;=x; return *this;}<&#47;pre>
<h1>main.cpp<&#47;h1>
<pre class="brush: cpp; gutter: true"> #include <iostream>
 #include "complex.h"
 int main()
 { setlocale(0, "rus");
 Complex x[3],rez;
 cout<<"Введите последовательно три комплексных числа\nв формате A+iB, либо A-iB,\n";
 cout<<"где A и B - действительные числа\n";
 for (int i=0; i<3; i++) cin>>x[i];
 cout<<"\n******************************************************\n";
 cout<<"Результат выражения\n(!("<<x[0]<<"*"<<x[2]<<"*<<"x[1]<<")&#47;";
cout<<x[1]<<"+"<<x[1]<<"-"<<x[2]<<"+"<<x[0]<<"&#47;(!"<<x[1]<<"))&#47;(-"<<x[1]<<"-"<<x[2]<<")&#47;"<<x[0]<<"\n";
rez = !(x[0]*x[2]*x[1]);
rez= (rez&#47;x[1]+x[1]-x[2]+x[0]&#47;(!x[1]));
rez= rez&#47;(-x[1]-x[2])&#47;x[0];
cout<<"равен: "<<rez;
return 0;
}<&#47;pre>
&nbsp;
